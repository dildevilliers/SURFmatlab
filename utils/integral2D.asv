function I = integral2D(X,Y,Z,rule)

% Integrates Z(X,Y) over the full [X,Y] range using 
% the optional argument rule = ['trap'] or 'simpson'
% X,Y, and Z must be the same size, with X and Y plaid, monotonic and
% uniform like generated by meshgrid

if nargin < 4
    rule = 'trap';
end

assert(all(size(X) == size(Y)) && all(size(Y) == size(Z)),'Input vectors must be the same size');
assert(ndims(Z) == 2,'Inputs X, Y and Z must be 2D matrices');

% Test for equal rows in X, and equal columns in Y (plaid)
rowEq = all(all(bsxfun(@eq,X,X(1,:))));
colEq = all(all(bsxfun(@eq,Y,Y(:,1))));
plaid = rowEq && colEq;
assert(plaid,'All rows of X must be equal, and all columns of Y')
% Test for monotonic
diffX = diff(X(1,:));
diffY = diff(Y(:,1));
monX = all(diffX>0);
monY = all(diffY>0);
mon = monX && monY;
assert(mon,'X and Y must contain monotonically increasing elements')
% Test for uniform
eps = 1e-10;
unX = all(abs(diffX - median(diffX)) < eps);
unY = all(abs(diffY - median(diffY)) < eps);
un = unX && unY;
assert(un,'X and Y must contain uniformly increasing elements')


switch rule
    case 'trap'
        I = trapz(X(1,:),trapz(Y(:,1),Z));
    case 'simp'
        
        I = bsxfun(@());
    otherwise
        error(['Unknown rule: ',rule])
end

